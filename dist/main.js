/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"game\": () => (/* binding */ game),\n/* harmony export */   \"gameboard\": () => (/* binding */ gameboard),\n/* harmony export */   \"p1\": () => (/* binding */ p1),\n/* harmony export */   \"p2\": () => (/* binding */ p2),\n/* harmony export */   \"p2Gameboard\": () => (/* binding */ p2Gameboard),\n/* harmony export */   \"player1\": () => (/* binding */ player1),\n/* harmony export */   \"player2\": () => (/* binding */ player2),\n/* harmony export */   \"ship\": () => (/* binding */ ship)\n/* harmony export */ });\n/* harmony import */ var _renderDOM__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderDOM */ \"./src/renderDOM.js\");\n\n\n(0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.createP1Board)();\n(0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.createP2Board)();\n\nfunction Ship(length = 2, name = 'battleship') {\n    return {\n        name,\n        length,\n        hits: 0,\n        sunk: false,\n        \n        hit() {\n            if (this.sunk === true) return this.length;\n            this.hits += 1;\n            return this.hits;\n        },\n\n        isSunk(hits) {\n            if (hits < this.length) {\n                return this.sunk;\n            } else if (hits >= this.length) {\n                this.sunk = true;\n                return this.sunk;\n            }\n        }\n\n    }\n}\n\nfunction Gameboard() {\n\n    return {\n        activeBoard: [],\n\n        shipMap: {},\n\n        createBoard() { \n            if (this.activeBoard.length >= 100) return;\n            for (let i = 1; i <= 100; i++) {\n                let square = {};\n                square.name = i;\n                square.status = 'untargeted';\n                square.occupied = 'no';\n                \n                this.activeBoard.push(square);\n            }\n            return this.activeBoard.length;\n        },\n\n        createShips() {\n            this.shipMap.destroyer = new Ship(2, 'destroyer');\n            this.shipMap.submarine = new Ship(3, 'submarine');\n            this.shipMap.cruiser = new Ship(3, 'cruiser');\n            this.shipMap.battleship = new Ship(4, 'battleship');\n            this.shipMap.carrier = new Ship(5, 'carrier');\n            return Object.keys(this.shipMap).length;\n        },\n\n        placeShip(ship, [x, y]) {\n            let size = ship.length;\n            ship.coordinates = [];\n            if (size + x > 11) return 'Invalid Location';\n            let mapCheck = (array) => {\n                for (let i = 0; i < size; i++) {\n                    let index = ((y * 10) + (x + i)) - 11;\n                    if (array[index].occupied !== 'no') {\n                        return true\n                    }\n                }\n            }\n            if (mapCheck(this.activeBoard) === true) {\n                return 'Invalid Location';\n            } else {\n                for (let i = 0; i < size; i++) {\n                    let index = ((y * 10) + (x + i)) - 11;\n                    ship.coordinates.push({x: x+i, y});\n                    let square = this.activeBoard[index];\n                    square.occupied = ship.name;\n                }\n                console.log(ship.coordinates);\n                return ship.coordinates;\n            }\n        },\n\n        receiveAttack([x, y]) {\n            let squareIndex = ((y * 10) + x) - 11;\n            if (this.activeBoard[squareIndex].occupied !== 'no') {\n                this.activeBoard[squareIndex].status = 'hit';\n                let shipSelect = this.activeBoard[squareIndex].occupied;\n                let ship = this.shipMap[`${shipSelect}`];\n                ship.hits += 1;\n                ship.isSunk(ship.hits);\n                if (ship.sunk === true) {\n                    this.activeBoard.forEach((square) => {\n                        if (square.occupied === shipSelect) {\n                            square.status = 'sunk';\n                        }\n                    })\n                } else if (ship.sunk === false) {\n                    this.activeBoard[squareIndex].status = 'hit';\n                }\n            } else if (this.activeBoard[squareIndex].occupied === 'no'){\n                this.activeBoard[squareIndex].status = 'miss'\n            }\n            return this.activeBoard[squareIndex];\n        }\n    }\n}\n\nfunction Player(name) {\n    return {\n        name,\n\n        untargetedSquares: [],\n\n        knownShip: false,\n\n        attackResult: 'miss',\n\n        hitSquares: [],\n\n        latestMove: undefined,\n\n        launchAttack(opponent, [x, y]) {\n            if (opponent === player1) {\n                let attack = gameboard.receiveAttack([x, y]);\n                if (attack.status === 'hit') {\n                    this.hitSquares.push(attack);\n                    this.knownShip = true;\n                    this.attackResult = 'hit'\n                } else if (attack.status === 'sunk') {\n                    this.hitSquares.push(attack);\n                    this.knownShip = false;\n                    this.attackResult = 'hit';\n                } \n                else {\n                    this.knownShip = false;\n                    this.attackResult = 'miss';\n                }\n                return attack;\n            } else if (opponent === player2) {\n                let attack = p2Gameboard.receiveAttack([x, y]);\n                if (attack.status === 'hit') {\n                    this.hitSquares.push(attack);\n                    this.knownShip = true;\n                } else if (attack.status === 'sunk') {\n                    this.hitSquares.push(attack);\n                    this.knownShip = false;\n                } \n                else {\n                    this.knownShip = false;\n                }\n            }\n        },\n\n        computerAttack() {\n            if (this.knownShip === true) {\n                return this.smartComputer();\n            } else if (this.knownShip === false) {\n                this.untargetedSquares = [];\n                for (let i = 0; i < gameboard.activeBoard.length; i++) {\n                    if (gameboard.activeBoard[i].status === 'untargeted') {\n                        this.untargetedSquares.push(gameboard.activeBoard[i]);\n                    }\n                }\n                let randomChoice = Math.round(Math.random()*(this.untargetedSquares.length - 1));\n                let squareSelect = this.untargetedSquares[randomChoice].name.toString();\n                let yCoord; let xCoord;\n                if (parseInt(squareSelect) < 10) {\n                    yCoord = 1;\n                    xCoord = parseInt(squareSelect);\n                } else if (parseInt(squareSelect) % 10 === 0) {\n                    yCoord = parseInt(squareSelect.slice(0, 1)) + 1;\n                    xCoord = 10;\n                } else {\n                    yCoord = parseInt(squareSelect.slice(0, 1)) + 1;\n                    xCoord = parseInt(squareSelect.slice(1));\n                }\n                this.launchAttack(player1, [xCoord, yCoord]);\n\n                return [squareSelect, xCoord, yCoord, this.knownShip];\n            }\n        },\n\n        smartComputer() {\n            let squareAbove = {}; let squareBelow = {}; let squareLeft = {}; let squareRight = {};\n            let recentHit = this.hitSquares[this.hitSquares.length - 1].name.toString();\n            let yCoord;\n            let xCoord;\n            if (parseInt(recentHit) < 10) {\n                yCoord = 1;\n                xCoord = parseInt(recentHit);\n            \n            } else if (parseInt(recentHit) % 10 === 0) {\n                yCoord = parseInt(recentHit.slice(0, 1)) + 1;\n                xCoord = 10;\n            } else {\n                yCoord = parseInt(recentHit.slice(0, 1)) + 1;\n                xCoord = parseInt(recentHit.slice(1));\n            }\n            if(yCoord + 1 <= 10) {\n                // squareAbove.name = squareAbove;\n                squareAbove.x = xCoord;\n                squareAbove.y = yCoord + 1;\n                squareAbove.goodMove = true;\n            }\n            if (yCoord - 1 >= 1) {\n                // squareBelow.name = squareBelow;\n                squareBelow.x = xCoord;\n                squareBelow.y = yCoord - 1;\n                squareBelow.goodMove = true;\n            }\n            if (xCoord + 1 <= 10) {\n                // squareRight.name = squareRight;\n                squareRight.x = xCoord + 1;\n                squareRight.y = yCoord;\n                squareRight.goodMove = true;\n            }\n            if (xCoord - 1 >= 1) {\n                // squareLeft.name = squareLeft;\n                squareLeft.x = xCoord - 1;\n                squareLeft.y = yCoord;\n                squareLeft.goodMove = true;\n            }\n            \n            let brain = () => {\n                if (this.latestMove !== undefined) {\n                    this.latestMove.goodMove = false;\n                }\n                let possibleMoves = [squareAbove, squareBelow, squareLeft, squareRight];\n                let smartMoves = [];\n                for (let i = 0; i < possibleMoves.length; i++) {\n                    if (possibleMoves[i].goodMove === true) {\n                        smartMoves.push(possibleMoves[i]);\n                    }\n                }\n                this.latestMove = smartMoves[0];\n                this.launchAttack(player1, [smartMoves[0].x, smartMoves[0].y]);\n                return smartMoves;\n            }\n\n            return brain();\n        }\n    }\n}\n\nlet ship = new Ship();\nlet gameboard = new Gameboard();\nlet p2Gameboard = new Gameboard();\nlet p1 = new Player('Tyler');\nlet p2 = new Player('Computer');\n\nconst player1 = p1.name;\nconst player2 = p2.name;\n\nfunction Game (){\n    return {\n        startGame: true,\n\n        playerTurn: player1,\n\n        unusedSquares: [],\n\n        initializeGame() {\n            gameboard.createBoard();\n            p2Gameboard.createBoard();\n            (0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.initializeSquares)('p1');\n            (0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.initializeSquares)('p2');\n            (0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.initializeHoverSquares)('p1');\n            (0,_renderDOM__WEBPACK_IMPORTED_MODULE_0__.initializeHoverSquares)('p2');\n            gameboard.createShips();\n            p2Gameboard.createShips();\n            this.computerPlacingShip();\n        },\n\n        placingShips(num, [x, y]) {\n                if (num === 0) {\n                    let placement = gameboard.placeShip(gameboard.shipMap.destroyer, [x, y]);\n                    if (placement === 'Invalid Location') return 'Invalid Location'\n                    this.displayPlayerShips();\n                } else if (num === 1) {\n                    let placement = gameboard.placeShip(gameboard.shipMap.submarine, [x, y]);\n                    if (placement === 'Invalid Location') return 'Invalid Location'\n                    this.displayPlayerShips();\n                } else if (num === 2) {\n                    let placement = gameboard.placeShip(gameboard.shipMap.cruiser, [x, y]);\n                    if (placement === 'Invalid Location') return 'Invalid Location'\n                    this.displayPlayerShips();\n                } else if (num === 3) {\n                    let placement = gameboard.placeShip(gameboard.shipMap.battleship, [x, y]);\n                    if (placement === 'Invalid Location') return 'Invalid Location'\n                    this.displayPlayerShips();\n                } else if (num === 4) {\n                    let placement = gameboard.placeShip(gameboard.shipMap.carrier, [x, y]);\n                    if (placement === 'Invalid Location') return 'Invalid Location'\n                    this.displayPlayerShips();\n                    this.startGame = false;\n                }\n        },\n\n        computerPlacingShip() {\n            let getUnused = () => p2Gameboard.activeBoard.forEach((square) => {\n                if (square.occupied === 'no') {\n                    this.unusedSquares.push(square);\n                }\n            })\n\n            let yCoord;\n            let xCoord;\n\n            let randomNum = () => {\n                let num = Math.floor((Math.random() * (this.unusedSquares.length - 1)) + 1);\n                let chosenSquare = this.unusedSquares[num].name.toString();\n                if (parseInt(chosenSquare) < 10) {\n                    yCoord = 1;\n                    xCoord = parseInt(chosenSquare);\n                \n                } else if (parseInt(chosenSquare) % 10 === 0) {\n                    yCoord = parseInt(chosenSquare.slice(0, 1)) + 1;\n                    xCoord = 10;\n                } else {\n                    yCoord = parseInt(chosenSquare.slice(0, 1)) + 1;\n                    xCoord = parseInt(chosenSquare.slice(1));\n                }\n                return;\n            }\n\n            let destroyer = () => {\n                getUnused();\n                randomNum();\n                let placement = p2Gameboard.placeShip(p2Gameboard.shipMap.destroyer, [xCoord, yCoord])\n                if (placement === 'Invalid Location') {\n                    destroyer();\n                } else {\n                    placement;\n                }\n            }\n            let submarine = () => {\n                getUnused();\n                randomNum();\n                let placement = p2Gameboard.placeShip(p2Gameboard.shipMap.submarine, [xCoord, yCoord])\n                if (placement === 'Invalid Location') {\n                    submarine();\n                } else {\n                    placement;\n                };\n            }\n            let cruiser = () => {\n                getUnused();\n                randomNum();\n                let placement = p2Gameboard.placeShip(p2Gameboard.shipMap.cruiser, [xCoord, yCoord])\n                if (placement === 'Invalid Location') {\n                    cruiser();\n                } else {\n                    placement;\n                };\n            };\n            let battleship = () => {\n                getUnused();\n                randomNum();\n                let placement = p2Gameboard.placeShip(p2Gameboard.shipMap.battleship, [xCoord, yCoord])\n                if (placement === 'Invalid Location') {\n                    battleship();\n                } else {\n                    placement;\n                };\n            }\n            let carrier = () => {\n                getUnused();\n                randomNum();\n                let placement = p2Gameboard.placeShip(p2Gameboard.shipMap.carrier, [xCoord, yCoord])\n                if (placement === 'Invalid Location') {\n                    carrier();\n                } else {\n                    placement;\n                };\n            }\n            destroyer(); submarine(); cruiser(); battleship(); carrier();\n            console.log(p2Gameboard.shipMap);\n        },\n\n        displayPlayerShips() {\n            let p1Squares = document.querySelectorAll('.p1Square');\n            p1Squares.forEach((square) => {\n                let target = gameboard.activeBoard[square.id.slice(2) - 1];\n                if(target.occupied !== 'no') {\n                    square.classList.add('squareHover');\n                }\n            })\n        },\n\n        changePlayer() {\n\n        }\n    }\n}\n\nlet game = new Game();\ngame.initializeGame();\n\n\n\n\n\n//# sourceURL=webpack://top-battleship/./src/index.js?");

/***/ }),

/***/ "./src/renderDOM.js":
/*!**************************!*\
  !*** ./src/renderDOM.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createP1Board\": () => (/* binding */ createP1Board),\n/* harmony export */   \"createP2Board\": () => (/* binding */ createP2Board),\n/* harmony export */   \"initializeHoverSquares\": () => (/* binding */ initializeHoverSquares),\n/* harmony export */   \"initializeSquares\": () => (/* binding */ initializeSquares),\n/* harmony export */   \"renderSquareStatus\": () => (/* binding */ renderSquareStatus),\n/* harmony export */   \"xCoord\": () => (/* binding */ xCoord),\n/* harmony export */   \"yCoord\": () => (/* binding */ yCoord)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ \"./src/index.js\");\n\n\nlet xCoord;\nlet yCoord;\nlet counter = 0;\n\nconst p1Gameboard = document.querySelector('.p1Gameboard')\nfunction createP1Board() {\n    for (let i = 1; i <= 10; i++) {\n        let column = document.createElement('div');\n        column.classList.add('column');\n        p1Gameboard.appendChild(column);\n        for (let j = 9; j >= 0; j--) {\n            let square = document.createElement('div');\n            square.classList.add('p1Square');\n            if (i === 10) {\n                square.setAttribute('id', `sq${j+1}0`);\n            } else if (j === 0) {\n                square.setAttribute('id', `sq${i}`)\n            } else {\n                square.setAttribute('id', `sq${j}${i}`);\n            }\n            column.appendChild(square);\n        }\n    }\n}\nconst p2gameboard = document.querySelector('.p2Gameboard');\nfunction createP2Board() {\n    for (let i = 1; i <= 10; i++) {\n        let column = document.createElement('div');\n        column.classList.add('column');\n        p2gameboard.appendChild(column);\n        for (let j = 9; j >= 0; j--) {\n            let square = document.createElement('div');\n            square.classList.add('p2Square');\n            if (i === 10) {\n                square.setAttribute('id', `sq${j+1}0`);\n            } else if (j === 0) {\n                square.setAttribute('id', `sq${i}`);\n            } else {\n                square.setAttribute('id', `sq${j}${i}`);\n            }\n            column.appendChild(square);\n        }\n    }\n}\n\nfunction renderSquareStatus(player) {\n    let activeBoard;\n    if (player === 'p1') {\n        activeBoard = ___WEBPACK_IMPORTED_MODULE_0__.gameboard.activeBoard;\n    } else if (player === 'p2') {\n        activeBoard = ___WEBPACK_IMPORTED_MODULE_0__.p2Gameboard.activeBoard;\n    }\n    for (let i = 0; i < activeBoard.length; i++) {\n        let number = (activeBoard[i].name);\n        let square = document.querySelector(`.${player}Square#sq${number}`);\n        if (activeBoard[i].status === 'hit') {\n            square.textContent = 'H';\n        } else if (activeBoard[i].status === 'miss') {\n            square.textContent = 'M'\n        } else if (activeBoard[i].status === 'untargeted'){\n            square.textContent = '';\n        } else if (activeBoard[i].status === 'sunk') {\n            square.textContent = 'X'\n        }\n    }\n}\n\nfunction initializeSquares(player) {\n    let squares = document.querySelectorAll(`.${player}Square`);\n    squares.forEach((square) => {\n        square.addEventListener('click', (e) => {\n            let target = (e.target.id.slice(2));\n            if (parseInt(target) < 10) {\n                xCoord = parseInt(target);\n                yCoord = 1;\n            } else if (parseInt(target) === 100) {\n                xCoord = 10;\n                yCoord = 10;\n            } else if (parseInt(target) % 10 === 0) {\n                xCoord = 10;\n                yCoord = parseInt(target.slice(0, 1));\n            } else {\n                xCoord = parseInt(target.slice(target.length - 1));\n                yCoord = parseInt(target.slice(0, 1)) + 1;\n            }\n            if (___WEBPACK_IMPORTED_MODULE_0__.game.startGame === true) {\n                if (e.target.className.includes('p2')) return;\n                console.log(counter);\n                console.log(xCoord, yCoord);\n                let placement = ___WEBPACK_IMPORTED_MODULE_0__.game.placingShips(counter, [xCoord, yCoord]);\n                if (placement === 'Invalid Location') {counter -= 1};\n                counter += 1;\n            } else {\n                if (e.target.className.includes('p1')) return;\n                let squareIndex = ((yCoord * 10) + xCoord) - 11;\n                if(player === 'p1') {\n                    if (___WEBPACK_IMPORTED_MODULE_0__.gameboard.activeBoard[squareIndex].status !== 'untargeted') return;\n                    ___WEBPACK_IMPORTED_MODULE_0__.p2.launchAttack(___WEBPACK_IMPORTED_MODULE_0__.player1, [xCoord, yCoord]);\n                    renderSquareStatus(player);\n                } else if (player === 'p2') {\n                    if (___WEBPACK_IMPORTED_MODULE_0__.p2Gameboard.activeBoard[squareIndex].status !== 'untargeted') return;\n                    ___WEBPACK_IMPORTED_MODULE_0__.p1.launchAttack(___WEBPACK_IMPORTED_MODULE_0__.player2, [xCoord, yCoord]);\n                    renderSquareStatus(player);\n                }  \n            }\n        })\n    })\n}\n\nfunction initializeHoverSquares(player) {\n    let squares = document.querySelectorAll(`.${player}Square`);\n    squares.forEach((square) => {\n        square.addEventListener('mouseover', (e) => {\n            let target = (e.target.id.slice(2));\n            if (parseInt(target) < 10) {\n                xCoord = parseInt(target);\n                yCoord = 1;\n            } else if (parseInt(target) === 100) {\n                xCoord = 10;\n                yCoord = 10;\n            } else if (parseInt(target) % 10 === 0) {\n                xCoord = 10;\n                yCoord = parseInt(target.slice(0, 1));\n            } else {\n                xCoord = parseInt(target.slice(target.length - 1));\n                yCoord = parseInt(target.slice(0, 1)) + 1;\n            }\n            let squareSelect = document.querySelector(`.${player}Square#sq${target}`);\n            if (___WEBPACK_IMPORTED_MODULE_0__.game.startGame === true) {\n                // squareSelect.classList.add('squareHover');\n            }\n            square.addEventListener('mouseleave', (e) => {\n                // squareSelect.classList.remove('squareHover');\n            })\n        })\n    })\n}\n\n\n//# sourceURL=webpack://top-battleship/./src/renderDOM.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;